<?php

namespace App\Http\Controllers\Training;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;

use Auth;

use App\Models\LectionNonce, App\Models\LectionResult;

use App\Traits\CalculateXP;

class ResultController extends Controller
{
  use CalculateXP;
  /**
    * Middlewares:
    *  - auth
    *
    */
  public function __construct()
  {
    $this->middleware('auth');
  }

  /**
    * show result of last lection/training/exercise
    * (results from session)
    *
    * @return view
    */
  public function show()
  {
    // in case page gets reloaded, reflash the session storage
    session()->reflash();

    return view('training.results', [
      'xp'          => 10,
      'velocity'    => session('velocity'),
      'errors'      => session('errors'),
      'keystrokes'  => session('keystrokes'),
      'cheated'     => session('cheated'),
    ]);
  }

  /**
    * stores results of training/lection/exercise after validating input
    *
    * @param Request $request
    * @return Response (200)
    */
  public function upload(Request $request)
  {
    $user       = Auth::user();
    $nonce      = LectionNonce::where('nonce', $request->input('nonce'))->first();
    $velocity   = $request->input('velocity');
    $errors     = $request->input('errors');
    $keystrokes = $request->input('keystrokes');
    $xp         = $this->calculateXP($nonce);

    // flash results to session (so that they can be used in show())
    session()->flash('velocity',    $velocity);
    session()->flash('errors',      $errors);
    session()->flash('keystrokes',  $keystrokes);
    session()->flash('xp', $xp);

    // check results and, if valid, save them
    if($this->validateResult($user->id_user, $nonce, $velocity)) {

      $result = new LectionResult([
        'id_user'     => $user->id_user,
        'velocity'    => $velocity,
        'errors'      => $errors,
        'keystrokes'  => $keystrokes,
        'xp'          => $xp,
      ]);

      $result->save();

    } else {

      session()->flash('cheated', true);
    }

    // nonce has been validated and isn't needed anymore
    $nonce->delete();

    return response('', 200);
  }

  /**
    * Determines if a nonce is valid. Makes additional checks to
    * ensure input is not fraudulent.
    * NOTE: nonce still exists after validation, must be deleted manually
    *
    * @param int $userId: user's id
    * @param LectionNonce $nonce: the nonce generated by nonce
    * @param double $velocity: user's velocity (from result uploaded)
    *
    * @return boolean
    */
  public function validateResult($userId, $nonce, $velocity)
  {
    if($nonce) {  // nonce exists

      if($nonce->id_user === $userId) {

        // calculate total time needed for lection
        $timeDiff = time() - $nonce->created_at->timestamp;

        // velocity of over 600 is not possible for humans (proof?)
        if($velocity > 600) return false;

        // convert keystrokes per min to key. per sec
        $velocity /= 60.0;

        // calculate approx characters typed by user
        $characters = $velocity * $timeDiff;

        // if the user could not type the amount of characters
        // in the calculated timeframe, user must be cheating
        if($characters < $nonce->character_amount) {

          return false;

        } else {

          return true;  // everything ok, results are valid and can be stored
        }
      }
    }

    return false;
  }
}
